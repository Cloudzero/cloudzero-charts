name: Manual Release Chart

# manual trigger only
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use for the release'
        required: false
        default: ''

jobs:
  build-and-publish-chart:
    permissions:
      contents: 'write'
      packages: 'write'
      id-token: write
      actions: 'read'
    runs-on: ubuntu-latest
    steps: 

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0                # fetch the whole repo history

      - name: Set up Git
        run: |
          git config --local user.email "ops@cloudzero.com"
          git config --local user.name "Automated CZ Release"

      - name: Fetch all branches
        run: git fetch --all

      - name: Checkout develop branch
        run: git checkout develop

      - name: Rebase develop branch
        run: git pull --rebase origin develop

      - name: Checkout main branch
        run: git checkout main

      - name: Rebase main branch
        run: git pull --rebase origin main

      - name: Merge develop into main
        run: git merge develop

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Build Dependencies
        run: |
          helm dependency update charts/cloudzero-agent/

      # This only gets versions - no actual changes are made to github
      - name: Get Github Tag Version
        id: version
        uses: flatherskevin/semver-action@v1
        with:
          incrementLevel: patch
          source: tags

      - name: Determine Chart Version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=${{ steps.version.outputs.nextVersion }}" >> $GITHUB_ENV
          fi

      - name: Update Chart Version
        run: |
          VERSION_LINE=$(awk '/version:/ && !done {print NR; done=1}' charts/cloudzero-agent/Chart.yaml)
          sed -i ''$VERSION_LINE's/.*/version: ${{ env.NEW_VERSION }}/' charts/cloudzero-agent/Chart.yaml

      - name: Package Chart
        run: |
          helm package charts/cloudzero-agent/ --destination .deploy

      - name: Commit updated Chart.yaml
        run: |
          git add .
          git commit -m "Update Chart.yaml to version ${{ env.NEW_VERSION }}"
          git push origin main
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Generate Change Log
        id: get_changes
        run: |
          FROM=$(git show-ref --abbrev=7 --tags | grep "${{ steps.version.outputs.currentVersion }}" | cut -f1 -d' ')
          TO=$(git rev-parse --short HEAD)
          CHANGES=$(git log ${FROM}..${TO} --oneline)
          echo "::set-output name=changes::${CHANGES}"

      - name: Upload Chart as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: agent-chart
          path: .deploy/cloudzero-agent-${{ env.NEW_VERSION }}.tgz

      - name: Checkout GH Pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0                # fetch the whole repo history

      - name: Download Chart Artifact
        uses: actions/download-artifact@v2
        with:
          name: agent-chart
          path: .

      - name: Update Index
        run: |
          helm repo index --url https://cloudzero.github.io/cloudzero-charts .

      - name: Commit and Push gh-pages changes
        run: |
          git add .
          git commit -m "Commit for ${{ env.NEW_VERSION }}"
          git push origin gh-pages

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.NEW_VERSION }}
          tag_name: ${{ env.NEW_VERSION }}
          files: cloudzero-agent-${{ env.NEW_VERSION }}.tgz
          make_latest: true
          target_commitish: ${{ env.COMMIT_HASH }}
          body: |
            # Release ${{ env.NEW_VERSION }} Changes

            ${{ steps.get_changes.outputs.changes }}

            # Installation 
            
            ## 1. Add the Helm Repository

            ```console
            helm repo add cloudzero https://cloudzero.github.io/cloudzero-charts
            helm repo update
            ```

            ## 2. Install Helm Chart

            The chart can be installed directly with Helm or any other common Kubernetes deployment tools.

            If installing with Helm directly, the following command will install the chart:
            ```console
            helm install <RELEASE_NAME> cloudzero/cloudzero-agent \
                --set existingSecretName=<NAME_OF_SECRET> \
                --set clusterName=<CLUSTER_NAME> \
                --set cloudAccountId=<CLOUD_ACCOUNT_ID> \
                --set region=<REGION>
            ```

            Alternatively if you are updating an existing installation, you can upgrade the chart with:
            ```console
            helm upgrade <RELEASE_NAME> cloudzero/cloudzero-agent \
                --set existingSecretName=<NAME_OF_SECRET> \
                --set clusterName=<CLUSTER_NAME> \
                --set cloudAccountId=<CLOUD_ACCOUNT_ID> \
                --set region=<REGION>
            ```

            ### Secret Management

            The chart requires a CloudZero API key in order to send metric data to the CloudZero platform. Admins can retrieve API keys [here](https://app.cloudzero.com/organization/api-keys).

            The Deployment running Prometheus ingests the API key via a Secret; this Secret can be supplied as an existing secret (default), or created by the chart. Both methods will require the API key retrieved from the CloudZero platform.

            If using a Secret external to this chart for the API key, ensure the Secret is created in the same namespace as the chart and that the Secret data follows the format:

            ```yaml
            data:
              value: <API_KEY>
            ```

            For example, the Secret could be created with:
            ```bash
            kubectl create secret -n example-namespace generic example-secret-name --from-literal=value=<example-api-key-value>
            ```
            The Secret can then be used by the agent by giving `example-secret-name` as the Secret name for the `existingSecretName` argument.

            ### Metric Exporters

            This chart relies on metrics from the [kube-state-metrics](https://github.com/kubernetes/kube-state-metrics) and [node-exporter](https://github.com/prometheus/node_exporter) projects as chart dependencies.

            By default, these subcharts are disabled to allow the agent to scrape metrics from existing instances of `kube-state-metrics` and `node-exporter`. If you have an existing deployment, you need to configure the cloudzero-agent to use the existing service endpoint addresses. You can set these addresses in the `values.yaml` file as follows by defining the relative `serviceEndpoint`:

            ```yaml
            validator:
              serviceEndpoints:
                kubeStateMetrics: <kube-state-metrics>.<example-namespace>.svc.cluster.local:8080
                prometheusNodeExporter: <node-exporter>.<example-namespace>.svc.cluster.local:9100
            ```

            > **Note:** Replace `<example-namespace>` and the service names with the ones used in your deployments.

            Alternatively, if you do not have an existing kube-state-metrics and node-exporter, you can deploy them automatically by enabling the following settings. In this case you do not need to set the `validator.serviceEndpoints.*` values:

            ```yaml
            kube-state-metrics:
              enabled: true
            prometheus-node-exporter:
              enabled: true
            ```
