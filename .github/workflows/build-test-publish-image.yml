name: build_test_publish_image
on:
  push:
    # Only create "develop" branch tagged image
    branches:
      - develop
    # Only create "version tag" tagged image
    tags:
      - "v*.*.*"
  # create any PR image (tag is pr-<number>)
  # these should be cleaned once merged using the docker-clean.yml
  pull_request:

env:
  # build docker images to the (host) local registry
  REGISTRY_LOCAL_ADDR: localhost:5000
  # k8x requires the kind container address alias (comes from the kind-action)
  REGISTRY_TEST_ADDR: kind-registry:5000
  # If we are on develop or main, use the production repository
  REGISTRY_PROD_ADDR: ghcr.io
  # image name should be prefixed with the repository name
  IMAGE_NAME: ${{ github.repository }}/cloudzero-agent-validator
  
jobs:
  # This job detects if there are any changes to allow condition testing in other jobs
  has_changes:
    uses: ./.github/workflows/change-detector.yml
  
  # This job lints the chart
  test_chart_lint:
    runs-on: ubuntu-latest
    needs: has_changes
    permissions:
      contents: read
    steps:
      - name: SETUP - Checkout
        if: needs.has_changes.outputs.any_changed == 'true'
        uses: actions/checkout@v4

      - name: SETUP - Set up Helm
        if: needs.has_changes.outputs.any_changed == 'true'
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - name: SETUP - Set up chart-testing
        if: needs.has_changes.outputs.any_changed == 'true'
        uses: helm/chart-testing-action@v2.6.1

      - name: TEST - Lint the chart
        if: needs.has_changes.outputs.any_changed == 'true'
        env:
          # Agent Chart settings (prom repo is to work around issue with chart-testing tool)
          PROM_CHART_REPO: https://prometheus-community.github.io/helm-charts
          CLUSTER_NAME: cz-node-agent-ci
          CLOUD_ACCOUNT_ID: 00000000
          CZ_API_TOKEN: 'fake-api-token'
          REGION: 'us-east-1'
        run: |
          cd charts/cloudzero-agent
          helm dependency update
          ct lint --debug --charts . \
            --chart-repos=kube-state-metrics=$PROM_CHART_REPO \
            --chart-repos=prometheus-node-exporter=$PROM_CHART_REPO \
            --helm-lint-extra-args "--set=existingSecretName=api-token,clusterName=$CLUSTER_NAME,cloudAccountId=$CLOUD_ACCOUNT_ID,region=$REGION"

  # This job tests the chart on a KinD cluster
  # and if we are in the develop or tag branch, it will 
  # publish the image to the production registry
  build_test_chart_install_maybe_publish_image:
    runs-on: ubuntu-latest
    needs: has_changes
    permissions:
      contents: read
      # required to push the image to the registry
      packages: write
      # required for image signing
      id-token: write
    steps:
      # Checkout the repository code
      - name: SETUP - Checkout
        if: needs.has_changes.outputs.any_changed == 'true'
        id: checkout_code
        uses: actions/checkout@v4
        
      - # Install buildx for multi-platform builds
        name: SETUP - Docker Buildx
        if: needs.has_changes.outputs.any_changed == 'true'
        id: install_buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        with:
          driver-opts: network=host

      # Create a KinD cluster with a registry pod for testing (kind-registry:5000)
      - name: SETUP - Kubernetes KinD Cluster
        if: needs.has_changes.outputs.any_changed == 'true'
        id: install_kind
        uses: container-tools/kind-action@v1

      # Install helm on the host
      - name: SETUP - Helm
        if: needs.has_changes.outputs.any_changed == 'true'
        id: install_helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      # Install chart-testing tool to make chart validation easier
      - name: SETUP - chart-testing
        if: needs.has_changes.outputs.any_changed == 'true'
        id: install_ct
        uses: helm/chart-testing-action@v2.6.1

      # Sanity Check: Validate the k8s and Registry is Running
      - name: SANITY CHECK - KinD and Registry are running
        if: needs.has_changes.outputs.any_changed == 'true'
        id: validate_kind_install
        run: |
          kubectl version
          kubectl cluster-info
          kubectl describe nodes
          # In this context (and docker buildx) the address should use localhost
          docker pull busybox
          docker tag busybox ${{ env.REGISTRY_LOCAL_ADDR }}/localbusybox
          docker push ${{ env.REGISTRY_LOCAL_ADDR }}/localbusybox

      # Format the image name to OCI compatable format
      - name: INPUT PREP - image name formatting
        if: needs.has_changes.outputs.any_changed == 'true'
        id: image_name
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      # Extract metadata (tags, labels) the docker image build
      - name: INPUT PREP - Extract Docker metadata from git repository
        if: needs.has_changes.outputs.any_changed == 'true'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        env:
          VALIDATOR_IMAGE_DESCRIPTION: "CloudZero Agent Validator"
        with:
          # ONLY use the local registry address for the image until it is tested
          images: ${{ env.REGISTRY_LOCAL_ADDR }}/${{ env.IMAGE_NAME }}
          # Tag generation rules:
          # 1. branch name (used for develop or main)
          # 2. PR number (used for PRs)
          # 3. version to match the semver pattern for the chart
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          # Extra labels not defined by default
          labels: |
            maintainer=CloudZero
            org.opencontainers.image.description=${{ env.VALIDATOR_IMAGE_DESCRIPTION }}
            org.opencontainers.image.vendor=CloudZero
            image.name=${{ env.REGISTRY_PROD_ADDR }}/${{ env.IMAGE_NAME }}

      # Build the image and push image to the local registry
      - name: TEST - Build image
        if: needs.has_changes.outputs.any_changed == 'true'
        id: build_image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        env:
          PLATFORMS: "linux/amd64,linux/arm64"
          VALIDATOR_DOCKERFILE: charts/cloudzero-agent/src/Dockerfile
          VALIDATOR_CONTEXT: charts/cloudzero-agent/src
        with:
          push: true
          context: ${{ env.VALIDATOR_CONTEXT }}
          file: ${{ env.VALIDATOR_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms:  ${{ env.PLATFORMS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Install the chart using our temporary image
      - name: TEST - Install the chart
        if: needs.has_changes.outputs.any_changed == 'true'
        id: test_chart_installation
        env:
          NAMESPACE: monitoring
          # Agent Chart settings (prom repo is to work around issue with chart-testing tool)
          PROM_CHART_REPO: https://prometheus-community.github.io/helm-charts
          CLUSTER_NAME: cz-node-agent-ci
          CLOUD_ACCOUNT_ID: 00000000
          CZ_API_TOKEN: ${{ secrets.CZ_API_TOKEN || 'fake-api-token' }}
          REGION: 'us-east-1'
        run: |
          # use the test address for the image (k8s accesses via network alias)
          image_name="${{ env.REGISTRY_TEST_ADDR }}/${{ env.IMAGE_NAME }}"
          image_tag="${{ steps.meta.outputs.version }}"
          image_digest="${{ steps.build_image.outputs.digest }}"
          echo "using image_name=${image_name}"
          echo "using image_tag=${image_tag}"
          echo "using image_digest=${image_digest}"
  
          kubectl create namespace $NAMESPACE
          kubectl create secret -n $NAMESPACE generic api-token --from-literal=value=$CZ_API_TOKEN
          cd charts/cloudzero-agent
          helm dependency update
          ct install --charts . \
            --chart-repos=kube-state-metrics=$PROM_CHART_REPO \
            --chart-repos=prometheus-node-exporter=$PROM_CHART_REPO \
            --namespace $NAMESPACE \
            --helm-extra-set-args "\
              --set=validator.image.repository=${image_name} \
              --set=validator.image.tag=${image_tag} \
              --set=validator.image.digest=${image_digest} \
              --set=existingSecretName=api-token \
              --set=clusterName=$CLUSTER_NAME \
              --set=cloudAccountId=$CLOUD_ACCOUNT_ID \
              --set=region=$REGION \
              --set=kube-state-metrics.enabled=true \
              --set=prometheus-node-exporter.enabled=true"
      
      ###########################################################################
      # PRODUCTION ONLY STEPS BEYOND THIS POINT
      #
      # install regctl for registry management operations
      - name: PRODUCTION STEP - Install Regctl for registry management
        if : ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        id: install_regctl
        uses: iarekylew00t/regctl-installer@v1

      # Login to product docker registry
      - name: PRODUCTION STEP - login to container registry
        if : ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        id: prod_registry_login
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            regctl registry login ${{ env.REGISTRY_PROD_ADDR }} \
              --user "${{ github.actor }}" \
              --pass-stdin

      # Copy the image from the local registry 
      # to the production registry (retagging at the same time)
      # only allow on main, develop branches, or a version tag
      - name: PRODUCTION STEP - Publish Image to Production
        if : ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        id: prod_publish_image
        run: |
          regctl registry set --tls=disabled ${{ env.REGISTRY_LOCAL_ADDR }}
          regctl image copy \
            ${{ env.REGISTRY_LOCAL_ADDR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            ${{ env.REGISTRY_PROD_ADDR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
