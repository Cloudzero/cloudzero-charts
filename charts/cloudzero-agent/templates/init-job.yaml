{{- if .Values.insightsController.enabled }}
{{- if .Values.initScrapeJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cloudzero-agent.initScrapeJobName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cloudzero-agent.insightsController.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ include "cloudzero-agent.initScrapeJobName" . }}
      labels:
        {{- include "cloudzero-agent.insightsController.initScrapeJob.matchLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "cloudzero-agent.serviceAccountName" . }}
      restartPolicy: Never
      containers:
        - name: start-scrape
          image: {{ .Values.initScrapeJob.image.repository }}:{{ .Values.initScrapeJob.image.tag }}
          command: ["sh", "-c"]
          args:
            - |
              while true; do
                echo "Waiting for the insightsController server to be ready...";
                if curl -s -o /dev/null -w "%{http_code}" -k https://{{ include "cloudzero-agent.serviceName" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.insightsController.service.port }}/healthz | grep -q 200; then
                  echo "Server is ready, starting scrape job...";
                  curl -X POST -k https://{{ include "cloudzero-agent.serviceName" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.insightsController.service.port }}/scrape;
                  echo "Scrape process started.";
                  break;
                fi;
                echo "No 200 response from health endpoint. Retrying in 30 seconds...";
                sleep 30;
              done
{{- end }}
{{- if and (not .Values.insightsController.tls.useCertManager) .Values.initCertJob.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cloudzero-agent.initCertJobName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cloudzero-agent.insightsController.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ include "cloudzero-agent.initCertJobName" . }}
      labels:
        {{- include "cloudzero-agent.insightsController.initCertJob.matchLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "cloudzero-agent.serviceAccountName" . }}
      restartPolicy: Never
      containers:
        - name: init-cert
          image: {{ .Values.initCertJob.image.repository }}:{{ .Values.initCertJob.image.tag }}
          command: ["/bin/bash", "-c"]
          workingDir: /var/tmp
          args:
            - |
              #!/bin/bash
              set -e

              {{- if not .Values.insightsController.tls.useCertManager }}
              # Determine if the ValidatingWebhookConfiguration resources already have caBundle information
              MISSING_CA_BUNDLE=false
              {{- range $configType, $configs := .Values.insightsController.webhooks.configurations }}
              {{- $webhookName := printf "%s-%s" (include "cloudzero-agent.validatingWebhookConfigName" $) $configType }}
              {{- if or (index $.Values.insightsController.labels.resources $configType) (index $.Values.insightsController.annotations.resources $configType) }}
              CA_BUNDLE=$(kubectl get validatingwebhookconfiguration {{ $webhookName }} -o jsonpath='{.webhooks[0].clientConfig.caBundle}')
              if [[ -z "$CA_BUNDLE" ]]; then
                  MISSING_CA_BUNDLE=true
              fi
              {{- end }}
              {{- end }}

              SECRET_NAME={{ include "cloudzero-agent.tlsSecretName" . }}
              NAMESPACE={{ .Release.Namespace }}

              EXISTING_TLS_CRT=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.tls\.crt}')
              EXISTING_TLS_KEY=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.tls\.key}')

              # Check if the TLS Secret already has certificate information
              if [[ -z "$TLS_CRT" ]] || [[ -z "$TLS_KEY" ]] || [[ $MISSING_CA_BUNDLE == "true" ]]; then
                  echo "The TLS Secret and/or at least one webhook configuration contains empty certificate information. Creating a new certificate..."
              else
                  echo "The TLS Secret and all webhook configurations contain non-empty certificate information. Will not create a new certificate and will not patch resources."
                  exit 0
              fi

              # Generate self-signed certificate and private key
              openssl req -x509 -newkey rsa:2048 -keyout tls.key -out tls.crt -days 36500 -nodes -subj "/CN={{ include "cloudzero-agent.serviceName" . }}" -addext "subjectAltName = DNS:{{ include "cloudzero-agent.serviceName" . }}.default.svc"
              
              # Base64 encode the certificate
              export CA_BUNDLE=$(cat tls.crt | base64 | tr -d '\n')
              export TLS_CRT=$(cat tls.crt | base64 | tr -d '\n')
              export TLS_KEY=$(cat tls.key | base64 | tr -d '\n')

              # Update the TLS Secret with the certificate and key
              kubectl patch secret $SECRET_NAME \
                  -p '{"data": {"ca.crt": "'"$TLS_CRT"'", "tls.crt": "'"$TLS_CRT"'", "tls.key": "'"$TLS_KEY"'"}}'

              {{- range $configType, $configs := .Values.insightsController.webhooks.configurations }}
              {{- $webhookName := printf "%s-%s" (include "cloudzero-agent.validatingWebhookConfigName" $) $configType }}
              {{- if or (index $.Values.insightsController.labels.resources $configType) (index $.Values.insightsController.annotations.resources $configType) }}
              # Patch the ValidatingWebhookConfiguration {{ $webhookName }} with the caBundle
              kubectl patch validatingwebhookconfiguration  {{ $webhookName }} \
                --type='json' \
                -p="[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'$CA_BUNDLE'}]"
              {{- end }}
              {{- end }}
              {{- else }}
              echo "The useCertManager flag is set to true. Skipping certificate generation and patching of resources."
              {{- end }}
              exit 0
{{- end }}
{{- end }}
