apiVersion: v1
kind: ConfigMap
metadata:
  name: validator
data:
  script.sh: |
    set -e;
    echo 'Validation starting...';
    python -m venv /app/venv;
    export PATH='/app/venv/bin:$PATH';
    pip install -r requirements.txt;
    echo 'Running validations...';
    ./validate.sh;
    echo 'Validator finished.'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: validator-requirements
data:
  requirements.txt: |
    requests==2.32.3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: validator-script
data:
  validate.sh: |
    #!/usr/bin/env python3

    import os
    import requests
    import sys
    import time
    from typing import Tuple, Dict

    def check_service_availability(url: str, key: str) -> Tuple[str, str]:
      # only wait two minutes max
      MAX_RETRY = 12
      RETRY_INTERVAL = 10

      for _ in range(MAX_RETRY):
        try:
          response = requests.get(url)
          response.raise_for_status()
          return (key, 'success')
        except Exception as e:
          print(f'{url} not ready yet', file=sys.stderr)
          time.sleep(RETRY_INTERVAL)

      print(f'{key} not ready after {MAX_RETRY} retries', file=sys.stderr)
      return (key, 'failure')

    def check_external_connectivity() -> Tuple[str, str]:
      host: str = os.getenv('CZ_HOST', 'api.cloudzero.com')
      url: str = f'http://{host}'
      return check_service_availability(url, 'external_connectivity_available')

    def check_kube_state_metrics() -> Tuple[str, str]:
      url: str = os.getenv('KMS_EP_URL', f'http://kube-state-metrics:8080/')
      return check_service_availability(url, 'kube_state_metrics_available')

    def check_prometheus_node_exporter() -> Tuple[str, str]:
      url: str = os.getenv('NODE_EXPORTER_EP_URL', f'http://prometheus-node-exporter:9100/')
      return check_service_availability(url, 'prometheus_node_exporter_available')

    validations = [
      check_external_connectivity, 
      check_kube_state_metrics,
      check_prometheus_node_exporter,
    ]

    def run_validations() -> Dict[str, str]:
      results: Dict[str, str] = {}
      for check in validations:
        check_name: str = check.__name__
        key, value = check()
        results[key] = value
      return results

    def must_pass(results: Dict[str, str]):
      for check, result in results.items():
        if result != 'success':
          exit(1)

    def print_results(results: Dict[str, str]) -> None:
      print('-' * 60)
      print('{:<50} {:<10}'.format('CHECK', 'RESULT'))
      for check, result in results.items():
        print('{:<50} {:<10}'.format(check, result))
      print('-' * 60)

    def main():
      results = run_validations()
      
      print_results(results)

      # TODO - post results to status API endpoint
      must_pass(results)

    if __name__ == '__main__':
      main()
