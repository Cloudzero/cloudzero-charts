{{- if .Values.insightsController.enabled }}
{{ $backFillValues := (include "cloudzero-agent.backFill" . | fromYaml) }}
{{- if $backFillValues.enabled }}
{{- /*
  Backfill Job

  The backfill job collects historical Kubernetes resource metadata for cost
  allocation analysis. It runs immediately upon installation to capture existing
  resources and then runs on a configurable schedule to maintain ongoing data
  collection.

  This template generates both a CronJob and an immediate Job using a range
  loop:

  The CronJob handles scheduled runs (default: every 12 hours). The Job runs
  immediately upon helm install to capture existing resources without waiting
  for the first scheduled run.

  Helm hooks (post-install, hook-delete-policy) were tried, but rejected because
  they require Helm-specific features that don't work with helm template,
  kubectl apply, ArgoCD, Flux, or other GitOps tools

  The implementation uses a range loop with small if/else clauses to maximize
  code reuse while handling the minimal differences between CronJob and Job
  specifications.
*/ -}}
{{- range $jobType := list "CronJob" "Job" }}
apiVersion: batch/v1
kind: {{ $jobType }}
metadata:
  name: {{ if eq $jobType "CronJob" }}{{ include "cloudzero-agent.initBackfillCronJobName" $ }}{{ else }}{{ include "cloudzero-agent.initBackfillJobName" $ }}{{ end }}
  namespace: {{ $.Release.Namespace }}
  {{- include "cloudzero-agent.generateAnnotations" (merge (deepCopy $.Values.defaults.annotations) $.Values.initBackfillJob.annotations) | nindent 2 }}
  labels:
    {{- include "cloudzero-agent.insightsController.labels" $ | nindent 4 }}
    job-type: backfill
    {{- if eq $jobType "CronJob" }}
    job-category: cronjob
    {{- else }}
    job-category: onetime
    {{- end }}
spec:
  {{- if eq $jobType "CronJob" }}
  schedule: {{ $.Values.components.webhookServer.backfill.schedule | default "0 */3 * * *" | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          name: {{ include "cloudzero-agent.initBackfillCronJobName" $ }}
          namespace: {{ $.Release.Namespace }}
          labels:
            {{- include "cloudzero-agent.insightsController.initBackfillJob.matchLabels" $ | nindent 12 }}
            job-type: backfill
            job-category: cronjob
          {{- include "cloudzero-agent.generateAnnotations" $.Values.defaults.annotations | nindent 10 }}
        spec:
  {{- else }}
  template:
    metadata:
      name: {{ include "cloudzero-agent.initBackfillJobName" $ }}
      namespace: {{ $.Release.Namespace }}
      labels:
        {{- include "cloudzero-agent.insightsController.initBackfillJob.matchLabels" $ | nindent 8 }}
        job-type: backfill
        job-category: onetime
      {{- include "cloudzero-agent.generateAnnotations" $.Values.defaults.annotations | nindent 6 }}
    spec:
  {{- end }}
          serviceAccountName: {{ include "cloudzero-agent.serviceAccountName" $ }}
          restartPolicy: OnFailure
          {{- include "cloudzero-agent.generateDNSInfo" (dict "defaults" $.Values.defaults.dns) | nindent 10 }}
          {{- include  "cloudzero-agent.initBackfillJob.imagePullSecrets" $ | nindent 10 }}
          {{- include "cloudzero-agent.generatePriorityClassName" $.Values.defaults.priorityClassName | nindent 10 }}
          containers:
            - name: init-scrape
              {{- include "cloudzero-agent.generateImage" (dict "defaults" $.Values.defaults.image "image" $.Values.components.agent.image "compat" $.Values.insightsController.server.image) | nindent 14 }}
              command:
                - /app/cloudzero-webhook
              args:
                - -config
                - "{{ include "cloudzero-agent.insightsController.configurationMountPath" $ }}/server-config.yaml"
                - -backfill
              {{- include "cloudzero-agent.generateResources" (include "cloudzero-agent.mergeStringOverwrite" (list
                  ($.Values.components.webhookServer.backfill.resources | default (dict))
                  ($.Values.insightsController.resources | default (dict))
                ) | fromYaml) | nindent 14 }}
              volumeMounts:
                - name: insights-server-config
                  mountPath: {{ include "cloudzero-agent.insightsController.configurationMountPath" $ }}
              {{- if or $.Values.insightsController.volumeMounts $.Values.insightsController.tls.enabled }}
              {{- if or $.Values.existingSecretName $.Values.apiKey }}
                - name: cloudzero-api-key
                  mountPath: {{ $.Values.serverConfig.containerSecretFilePath }}
                  subPath: ""
                  readOnly: true
              {{- end }}
                {{- with $.Values.insightsController.volumeMounts }}
                  {{- toYaml . | nindent 16 }}
                {{- end }}
              {{- end }}
          {{- if or $.Values.insightsController.volumes $.Values.insightsController.tls.enabled }}
          volumes:
            - name: insights-server-config
              configMap:
                name: {{ include "cloudzero-agent.webhookConfigMapName" $ }}
            {{- if $.Values.insightsController.tls.enabled }}
            - name: tls-certs
              secret:
                secretName: {{ include "cloudzero-agent.tlsSecretName" $ }}
            {{- end }}
            {{- if or $.Values.existingSecretName $.Values.apiKey }}
            - name: cloudzero-api-key
              secret:
                secretName: {{ include "cloudzero-agent.secretName" $ }}
            {{- end }}
            {{- with $.Values.insightsController.volumes }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- include "cloudzero-agent.generateNodeSelector" (dict "default" $.Values.defaults.nodeSelector "nodeSelector" ($.Values.initBackfillJob.nodeSelector | default $.Values.insightsController.server.nodeSelector)) | nindent 10 }}
          {{- include "cloudzero-agent.generateAffinity" (dict "default" $.Values.defaults.affinity "affinity" $.Values.insightsController.server.affinity) | nindent 10 }}
          {{- include "cloudzero-agent.generateTolerations" (concat $.Values.defaults.tolerations $.Values.initBackfillJob.tolerations $.Values.insightsController.server.tolerations) | nindent 10 }}
---
{{- end }}
{{- end }}
{{- end }}
