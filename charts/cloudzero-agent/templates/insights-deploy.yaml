{{- if .Values.insightsController.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
{{- if .Values.insightsController.server.deploymentAnnotations }}
  annotations:
    {{- toYaml .Values.insightsController.server.deploymentAnnotations | nindent 4 }}
{{- end }}
  name: {{ include "cloudzero-agent.insightsController.server.webhookFullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cloudzero-agent.insightsController.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.insightsController.server.replicaCount }}
  selector:
    matchLabels:
      {{- include "cloudzero-agent.insightsController.server.matchLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.insightsController.server.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cloudzero-agent.insightsController.labels" . | nindent 8 }}
        {{- with .Values.insightsController.server.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "cloudzero-agent.serviceAccountName" . }}
      {{- with .Values.insightsController.server.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: webhook-server
                topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: init-cert
          image: bitnami/kubectl:1.32.0
          command: ["/bin/sh", "-c"]
          workingDir: /var/tmp
          args:
            - |
              set -e
              # tail -f /dev/null
              
              SECRET_NAME={{ include "cloudzero-agent.tlsSecretName" . }}

              EXISTING_TLS_CRT=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.tls\.crt}')
              EXISTING_TLS_KEY=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath='{.data.tls\.key}')

              # Check if the TLS Secret already has certificate information
              if [[ -n "$TLS_CRT" && -n "$TLS_KEY" ]]; then
                  echo "The TLS Secret: $SECRET contains non-empty tls.crt and tls.key. Will not create a new certificate."
                  exit 0
              fi

              # Generate self-signed certificate and private key
              openssl req -x509 -newkey rsa:2048 -keyout tls.key -out tls.crt -days 36500 -nodes -subj "/CN={{ include "cloudzero-agent.serviceName" . }}"
              
              # Base64 encode the certificate
              export CA_BUNDLE=$(cat tls.crt | base64 | tr -d '\n')
              export TLS_CRT=$(cat tls.crt | base64 | tr -d '\n')
              export TLS_KEY=$(cat tls.key | base64 | tr -d '\n')


              # Update the TLS Secret with the certificate and key
              kubectl patch secret $SECRET_NAME \
                  -p '{"data": {"ca.crt": "'"$TLS_CRT"'", "tls.crt": "'"$TLS_CRT"'", "tls.key": "'"$TLS_KEY"'"}}'

              {{ range $configType, $configs := .Values.insightsController.webhooks.configurations }}
              {{ $webhookName := printf "%s-%s" (include "cloudzero-agent.validatingWebhookConfigName" $) $configType }}
              {{- if or (index $.Values.insightsController.labels.resources $configType) (index $.Values.insightsController.annotations.resources $configType) }}
              # Patch the ValidatingWebhookConfiguration {{ $webhookName }} with the caBundle
              kubectl patch validatingwebhookconfiguration  {{ $webhookName }} \
                --type='json' \
                -p="[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'$CA_BUNDLE'}]"
              {{ end }}
              {{ end }}
      containers:
        - name: webhook-server
          image: "{{ .Values.insightsController.server.image.repository }}:{{ .Values.insightsController.server.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.insightsController.server.image.pullPolicy }}
          command:
            - /app/controller
          args:
            - -config
            - "{{ include "cloudzero-agent.insightsController.configurationMountPath" . }}/server-config.yaml"
          ports:
            - containerPort: 8443
          resources:
            {{- toYaml .Values.insightsController.resources | nindent 12 }}
          volumeMounts:
            - name: insights-server-config
              mountPath: {{ include "cloudzero-agent.insightsController.configurationMountPath" . }}
          {{- if or .Values.insightsController.volumeMounts .Values.insightsController.server.tls.enabled }}
            {{- if .Values.insightsController.server.tls.enabled }}
            - name: tls-certs
              mountPath: {{ .Values.insightsController.tls.mountPath }}
              readOnly: true
            {{- end }}
          {{- if or .Values.existingSecretName .Values.apiKey }}
            - name: cloudzero-api-key
              mountPath: {{ .Values.serverConfig.containerSecretFilePath }}
              subPath: ""
              readOnly: true
          {{- end }}
            {{- with .Values.insightsController.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- if and .Values.insightsController.server.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: {{ .Values.insightsController.server.healthCheck.path }}
              port: {{ .Values.insightsController.server.healthCheck.port }}
            initialDelaySeconds: {{ .Values.insightsController.server.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.insightsController.server.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.insightsController.server.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.insightsController.server.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.insightsController.server.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: {{ .Values.insightsController.server.healthCheck.path }}
              port: {{ .Values.insightsController.server.healthCheck.port }}
            initialDelaySeconds: {{ .Values.insightsController.server.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.insightsController.server.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.insightsController.server.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.insightsController.server.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.insightsController.server.healthCheck.failureThreshold }}
          {{- end }}
      {{- if or .Values.insightsController.volumes .Values.insightsController.server.tls.enabled }}
      volumes:
        - name: insights-server-config
          configMap:
            name: {{ include "cloudzero-agent.webhookConfigMapName" . }}
        {{- if .Values.insightsController.server.tls.enabled }}
        - name: tls-certs
          secret:
            secretName: {{ include "cloudzero-agent.tlsSecretName" . }}
        {{- end }}
        {{- if or .Values.existingSecretName .Values.apiKey }}
        - name: cloudzero-api-key
          secret:
            secretName: {{ include "cloudzero-agent.secretName" . }}
        {{- end }}
        {{- with .Values.insightsController.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- with .Values.insightsController.server.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.insightsController.server.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.insightsController.server.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
