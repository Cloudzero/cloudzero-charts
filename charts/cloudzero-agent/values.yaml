# -- CloudZero host to send metrics to.
host: api.cloudzero.com
# -- Account ID of the account the cluster is running in. This must be a string - even if it is a number in your system.
cloudAccountId: null
# -- Name of the clusters.
clusterName: null
# -- Region the cluster is running in.
region: null

# -- CloudZero API key. Required if existingSecretName is null.
apiKey: null
# -- If set, the agent will use the API key in this Secret to authenticate with CloudZero.
existingSecretName: null

# -- The following lists of metrics are required for CloudZero to function.
# -- Modifications made to these lists may cause issues with the processing of cluster data
kubeMetrics:
  - kube_node_info
  - kube_node_status_capacity
  - kube_pod_container_resource_limits
  - kube_pod_container_resource_requests
  - kube_pod_labels
  - kube_pod_info
containerMetrics:
  - container_cpu_usage_seconds_total
  - container_memory_working_set_bytes
  - container_network_receive_bytes_total
  - container_network_transmit_bytes_total
insightsMetrics:
  - go_memstats_alloc_bytes
  - go_memstats_heap_alloc_bytes
  - go_memstats_heap_idle_bytes
  - go_memstats_heap_inuse_bytes
  - go_memstats_heap_objects
  - go_memstats_last_gc_time_seconds
  - go_memstats_alloc_bytes
  - go_memstats_stack_inuse_bytes
  - go_goroutines
  - process_cpu_seconds_total
  - process_max_fds
  - process_open_fds
  - process_resident_memory_bytes
  - process_start_time_seconds
  - process_virtual_memory_bytes
  - process_virtual_memory_max_bytes
  - remote_write_timeseries_total
  - remote_write_response_codes_total
  - remote_write_payload_size_bytes
  - remote_write_failures_total
  - remote_write_records_processed_total
  - remote_write_db_failures_total
  - http_requests_total


# -- Any items added to this array will be added to the metrics that are sent to CloudZero, in addition to the minimal labels that CloudZero requires.
additionalMetricLabels: []

prometheusConfig:
  configMapNameOverride: ''
  configMapAnnotations: {}
  configOverride: ''
  globalScrapeInterval: 120s
  scrapeJobs:
    # -- Enables the kube-state-metrics scrape job.
    kubeStateMetrics:
      enabled: true
      scrapeInterval: 120s  # Scrape interval for kubeStateMetrics job
    # -- Enables the cadvisor scrape job.
    cadvisor:
      enabled: true
      scrapeInterval: 120s  # Scrape interval for nodesCadvisor job
    # -- Any items added to this list will be added to the Prometheus scrape configuration.
    additionalScrapeJobs: []

# General server settings that apply to both the prometheus agent server and the webhook server
serverConfig:
  # -- The agent will use this file path on the container filesystem to get the CZ API key.
  containerSecretFilePath: /etc/config/secrets/
  # -- The agent will look for a file with this name to get the CZ API key.
  containerSecretFileName: value

initJob:
  enabled: true
  image:
    repository: curlimages/curl
    pullPolicy: Always
    tag: "8.10.1"

kubeStateMetrics:
  enabled: true
  fullnameOverride: "cloudzero-state-metrics"
  nameOverride: "cloudzero-state-metrics"
  # Disable CloudZero KSM as a Scrape Target since the service endpoint is explicity defined
  # by the Validators config file.
  prometheusScrape: false
  # Set a default port other than 8080 to avoid collisions with any existing KSM services.
  service:
    port: 8080

  # Overriding static scrape target address for an existing KSM.
  # Set to service <servie-name>.<namespace>.svc.cluster.local:port if built-in is disabled (enable=false above)
  # targetOverride: kube-state-metrics.monitors.svc.cluster.local:8080

# -- Annotations to be added to the Secret, if the chart is configured to create one
secretAnnotations: {}
imagePullSecrets: []

# environment validator image allows for CI to use a different image in testing
validator:
  serviceEndpoints:
    kubeStateMetrics:
    prometheusNodeExporter:
  # -- Flag to skip validator failure if unable to connect to the CloudZero API.
  name: env-validator
  image:
    repository: ghcr.io/cloudzero/cloudzero-agent-validator/cloudzero-agent-validator
    tag: 0.10.0
    digest:
    pullPolicy: Always

server:
  name: server
  image:
    repository: quay.io/prometheus/prometheus
    # if not set appVersion field from Chart.yaml is used
    tag: ""
    # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).
    digest: ""
    pullPolicy: IfNotPresent
  nodeSelector: {}
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1024Mi
  deploymentAnnotations: {}
  podAnnotations: {}
  args:
  - --config.file=/etc/config/prometheus/configmaps/prometheus.yml
  - --web.enable-lifecycle
  - --web.console.libraries=/etc/prometheus/console_libraries
  - --web.console.templates=/etc/prometheus/consoles
  - --enable-feature=agent
  persistentVolume:
    existingClaim: ""
    enabled: false
    mountPath: /data
    subPath: ""
    storageClass: ""
    size: 8Gi
    accessModes:
    - ReadWriteOnce
  # --Limit the size to 8Gi to lower impact on the cluster, and to provide a reasonable backup for the WAL
  emptyDir:
    sizeLimit: 8Gi

insightsController:
  enabled: true
  labels:
    enabled:
    patterns:
      # - '.*'
    resources:
      pods: true
      namespaces: true
      deployments: false
      statefulsets: false
      nodes: false
      jobs: false
      cronjobs: false
      daemonsets: false
  annotations:
    enabled: false
    patterns:
      - '.*'
    resources:
      pods: true
      namespaces: true
      deployments: false
      statefulsets: false
      nodes: false
      jobs: false
      cronjobs: false
      daemonsets: false
  tls:
    crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwRENDQXJnQ0NRREh6RjdrK25yVGJUQU5CZ2txaGtpRzl3MEJBUXNGQURBcE1TY3dKUVlEVlFRRERCNUQKYkc5MVpGcGxjbTlUWld4bVUybG5ibVZrUTJWeWRHbG1hV05oZEdVd0lCY05NalV3TVRBek1UUXhNelExV2hnUApNakV5TkRFeU1UQXhOREV6TkRWYU1Da3hKekFsQmdOVkJBTU1Ia05zYjNWa1dtVnliMU5sYkdaVGFXZHVaV1JEClpYSjBhV1pwWTJGMFpUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU90U25LeEgKNVJqL1pjU1pENG82aFRsWFZvZmNnN2FpN3hRMU8xSjMrMXMzb2txeTBPQitXalZUVzd4NjNQUHhMNXdueU40Swpkb1A0VXphRXlvMWJZWWRkeFhZQ085Q05mT1VBOHNyRitKMjV1MFM4Lyt1QjNuVXJKUWY2ZjZ3bTZEOGNiZ0kzCnMxekZVdU1WMXc4MGNWWHA5ZWI2bFVTd1RNS0JYKytBb2IvWnhXb09BdnpseHhhYUtLRkt3bU1Na0dOTVJlbmEKdjhVNWJ5VUF3Z2Y4MU1iZTVyYUdMOFdRajY5RUt3NTV1S08wSWdnRjduajRzemNuNmVYYTFLY1R1OUpheFFMNwpWak5yQUJYMmFjdlhzd3l1aDJsc1lUV3dzVnFlT0pLaThJTUFmdklVYVFQUENyanJobi91THY5RUQzbEtHcDBpCmtJeUloa3ArcmxiQythV3U0ZS93K0NaNG9YZ1VMdkl0UUdsREdnaG5rSXhVeTdoaUZsVVlpTWVtWDNBb0x3M2oKcmhWU280ZGhLamMrdVFSblNYeFgzVDZXcXczb1kzVG5qQzErOEZnSkZwK2dyLzMySEt0WFF4YkNUVlNtcDVDYwo4c1A4TFBnOE1xcFZVZWIvV3UvK09ZcU9EZHY3SmxEMXAvM3RWUk1weG0zYjZNc2RoOFFIbGpjUkN4eDZJUlMxCi9xdkdPcU05SlhJdUg3ejFyYWh0cUQ4QVVjWHdoaHUyMWRLdWYycFIvcGdFdVpnNWhLNHRWMVR3aG95ZmZrMUMKUEhHTTRYQkhlU014Uk9LWjM2WDN0TzJRL1FLV04wN0FpbjhTVEVwL1Z1WmExdG15Zi9KQzJjWkJRcDZHN3B1LwprSHd0ckVCeEVRMmd0bVlzWENDRXh6T0c2THhaZkF1UlZVTFRBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnSUJBRG9WT3JMcTlBcjkxR3VuaUZhc1N1MTQ0RUFQLzYzTEVuVlBGbVhCbElBeEJCNkd3ZGx5VXBkU3h6VEsKNmlUNGpzQzEvZ05QZUkwMFZ6Um4zNmZuL2FHTFpHbkRERzZ3TGFYWnJ6Nm95VDlqSy9SVENseVlwckRtMld1WAp2TVFPZko4eEY5eTdLRU1hSEhFMmtEakpKSlpTWnVibU9Ma2llRjVma1ZtWHdLZW5mUzJzS0o0Y3ROUWxabW1MCjVBelNzVHZiZ2lELzRMNmMrU0w0eFI4MysrMWI1aDlIUFcrUnhqYmRoZ1BlUEdkTVdrOEQ3c0hPbjBTdjA3MGsKMnpTOXNrL09JbVJZN1BRbC82bjdKQTFGelMzUzMxY0h3STkwaHcydUwvRjRidGlFNUwvenFWaDVjcnB4QnhPaQpsdXBwVFdKL0o2cXVvQk9Sc0MyVG5tbzIveWFRZTZkVW96R2xYSTdtT0wyalpOd2tXbC9kbERNL1JUMWJqbU5pCm1kbjZxRUZCOGxTSGZnODBobTB6NXRhOTNXWHE3YXF4N2o2a1BlYVg2OUJvV05FalpVb211cXFlQlEyMWNmd0UKN2hxSlBJTm43RkcxMi8zZzhiREx4WWNWZkpmNnFIUTdEc3djK0NLNGI3dzIxdUJWbHZuWDhLeTRxbzBIYi9PQQp1TjByMlJ6WHRpdW9WaUcrbU5WdHltUHRkZ3BhVmdsdThQUEFHRGI0R1Q3VjlwT01WdVdOQ1d3ZDl6NG1YalYxCmdrL3U4OVZ6aTRmM0ZucWlYUGxGM2JxN05jY2w1SUN2cVhsU2ZDOWxqZWpXNFc0RDVLVzdVY3poSmNvcTdOV28KaWZoUTZGVDE5c09SMXFGUTRTdDVkbkN2ZGtuOTdIRGJGd2hyazRCWXp1dnJ2TlhXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRHJVcHlzUitVWS8yWEUKbVErS09vVTVWMWFIM0lPMm91OFVOVHRTZC90Yk42SktzdERnZmxvMVUxdThldHp6OFMrY0o4amVDbmFEK0ZNMgpoTXFOVzJHSFhjVjJBanZRalh6bEFQTEt4ZmlkdWJ0RXZQL3JnZDUxS3lVSCtuK3NKdWcvSEc0Q043TmN4VkxqCkZkY1BOSEZWNmZYbStwVkVzRXpDZ1YvdmdLRy8yY1ZxRGdMODVjY1dtaWloU3NKakRKQmpURVhwMnIvRk9XOGwKQU1JSC9OVEczdWEyaGkvRmtJK3ZSQ3NPZWJpanRDSUlCZTU0K0xNM0orbmwydFNuRTd2U1dzVUMrMVl6YXdBVgo5bW5MMTdNTXJvZHBiR0Uxc0xGYW5qaVNvdkNEQUg3eUZHa0R6d3E0NjRaLzdpNy9SQTk1U2hxZElwQ01pSVpLCmZxNVd3dm1scnVIdjhQZ21lS0Y0RkM3eUxVQnBReG9JWjVDTVZNdTRZaFpWR0lqSHBsOXdLQzhONDY0VlVxT0gKWVNvM1Bya0VaMGw4VjkwK2xxc042R04wNTR3dGZ2QllDUmFmb0svOTloeXJWME1Xd2sxVXBxZVFuUExEL0N6NApQREtxVlZIbS8xcnYvam1LamczYit5WlE5YWY5N1ZVVEtjWnQyK2pMSFlmRUI1WTNFUXNjZWlFVXRmNnJ4anFqClBTVnlMaCs4OWEyb2JhZy9BRkhGOElZYnR0WFNybjlxVWY2WUJMbVlPWVN1TFZkVThJYU1uMzVOUWp4eGpPRncKUjNrak1VVGltZCtsOTdUdGtQMENsamRPd0lwL0VreEtmMWJtV3RiWnNuL3lRdG5HUVVLZWh1NmJ2NUI4TGF4QQpjUkVOb0xabUxGd2doTWN6aHVpOFdYd0xrVlZDMHdJREFRQUJBb0lDQUQ2VjdDRk54YnFPUW15MUlKTHMyWDNVCm9xampsd3c5N1VQOG5GaGtuSzgzN3F2YlB2NVYzSHdPUFhtMVc0cHRmUElWQ3JFekt5NFNIMStDbGJSZXQyT2YKSnVNcDJPcXdscVQ1U1psd2FaelpSdHNUUVNWTGx2U21rdVM2VkxaZWFxcE9UMXU3b0xKdHNJdkF4VCsvL055UwpxdG5SajEyRFhnYmxEYlRQQ3pYUkgxWURmL3Z1eUxKVU1iWWtBZXNCN216YVhrWEI3ZnJ3T1lVbjNITHZaVSsyCi9MbFNtdVg2ZXB4c2p0Nzh0SVNsWmQrb1pESThRcjNLbWNTT0hMeUszUXNuSlBxVUNlc0c3RERySmx3V2RBSk4KY0tvekx1OXVuTnl5OCt6YjlRZUNYRURaK013UWhwT0Q0SE9wejBvSXVlelNMcDNZRVlXdTBiaUNWSyt5ajE1awp4QkFWSk1Sbk9MTlpXclIvUlZhNDNMcFZsTnVBSkJvbjFVeStYUkcxKy9UVW53NDNRcG5KZEoxTmJ4QVFzMmtuCnhFb3N2WTZvUFhVQlVmaGRLdC8xRk1DcGRpcDhoemNsbjBKc1hDUlhsUUtnQ1JnNHUrRmZ0YkhHQTVHR3ZZVFgKUDhFVFB6UWJjUnptalkvd2x2NVo5L0Vza1Awc2UvSTVrTnBEcTV0M3M3SllQbnpyOTlJNmxUak9zUml5UFBZRgpKeHFFWXVnK2dLTG9BZ2lsUUxadlh2c0R6T2FPSURNRGZhMmVjTGVTNkNMOE5Kc3lsOFRIcUpGTXQ1R1IxQ2pWCnJ3NDRUSkU5ZlJiUUt1ZkgzeDZ0Y2hKc1Bld2ZjYjM1S1dZUlRnZmhvOE90bFRWaVp2TkRERU9PWVRZamNQMTEKYU1DSytwQkFVVnRmY1lRU3V2YlJBb0lCQVFEMTVuRkpVdnRNNkFKVG51MW5nV01UOC9LbmlFbUV3SmE3TklxSwpqNm96dFB0NHFyckdQbTJXUStRQ09kZ1d4dk9sQzhWR2N5Zk03aHE5Zlg5WThSTWU1NU1jZDNodVhCR1dMRUh5CjR6MUNnYldnejFtVGV0ZjZrRUxmN3RoZS9ZTkZlbzN1Yk9DRXA4RitudFVLSUwxNHJ2QXAzNFh0N0hjWG95ZngKTE0rOTBuYms4bHRMdC96TTRzcTlVTjFSeDFNd2xRL3kvKzhVS3BKUmk1ZVlmTlBwbGVqMEw3dFQ3RzdEeDNXMQo3T3F6NGlWSHA1UzFMV2diYk9wKzZocGpJb0REc0J4K1MvY0ZRY3gwSGhiaFZiVi9wejc4RXdRa0dqNVBzN0syClpCLzFXRlJ5WUhlMTdkR1pLYmsvY1NQNzVONXFNbU4vV3RYcm5SUWNUMWhFalJkMUFvSUJBUUQwL1BOMXlMQngKbHl2ZnlYcEZlRE8yUURYNE5WMVN4RGQ2YXJLdGpiaGlPSTd3SkkwUkJ5OEJWdCtXa2JSZ0ZwU0xwRXJPcmQxNwpLTVFSa0NHU3E3WnA4OVF5S3k3TFg4UWVoQXhIc2tzOTZ1YnlLdTRoczNaMGV3MTlGZ2duWmpuaW84ZEZvNXVpCk41a3ZKazQxK3JXcy9EZU43UXlSU3M2TlE5Qy9wQlBTdUREWlNrSzBuTWNWcXhvMk1JaDVjaXZDSkdFMEc2ZzcKTjN2Zmg3MWhWTXlZbUNsS0wrR2NTVzNvU2tMa2laeFRmL3NRSzY1ZXFYZjFnUGFmTjBJOTBoZHUyT21nZndBMQpraFVnaERPU1lOZGU0Q1lRRlFhV3c3SGZwamdxVVVRd3FTVjlORDE3VnZrS01SQTNrNUZWaFE0TnJxRkVIeld6CjhsVmNnUm5RVmZBbkFvSUJBUURNNGVXd0wyamRLazZOOTlSY3NteW4rbEZMRDM0YUV4RkVCOElMTXlxZ0RJS2UKaHJvNlpWZVBwUjk4VDAvaG9vRHRHb0tUY1cxUERYRFFRNWx3dE9TMmtrSjdySHQya0ZYQzV6dEhzZGlmNmswNApJS3ZFK3N5cm83bGt0YkFvYlZnTDh0SUJQMHhPbXl2WVlXU21IS05odzNpdG11VVBXVC9kUFA4UnJzR2txcENQCnIvTXJnckFxMGlnVVZ5VWdkMUMwSU83NkRBN2FvYUhxT2NIa3R0VW1RZGFvWm9EUnF5U2JFVHpkaVBvQlNVTEEKa2p1UVBiWUphOVZ5UzRJUzZYT2FHTW1VM1p5REQ5RFhTeDdMUDB1TGdnRXpySEI5MkRQazJwZmo2a2JLZUg5YwpFVTZORWdyYWIrNCtrdmxsYnN0MmRtZDZmR2ZTK2IwQTNZZHhEcEhsQW9JQkFIWjNWeGRPdTV2Q0dUSTNFRXhGCml1UUhldEdTcEpVZ1V4OThOdmpidmh5bzh0M0hIdnZyK0Z2eWNWNHpDUUVxQ2h6WWptQVJEVGZBQjhmaVpZbXkKUlJ4SkR3UlBnMnBPM2R4UHlFeG5PQ0V4MVFtbm5zMW5KZEcvcTA4Z2QwTHVHUEd5ZHVzQzZZQncyRDlIaTZ4bwpscStXcXhxVFZXOXd1Qjd4ZXlFZ3E0RkxGandNditMc3FReWVWNmQ2b3BQdmxKOWx6aWRQZEhObUtoMTJXeXFVCndmYk1KYk05SWlEY0ZTeXR0RmtrL2hZV25nWTh5UzMzVHczRmxmeDUwU3RweTNFTHJUV3lGQnpUamluU0k4b1YKMEMrTnZub3FZS3hJNTF1WjJqRUVhVEFLcXhrM1NMKzYxK1NJd3luTXp3dUdzcndGQlBDWEV2WDRLalQ0TE01awpzQ01DZ2dFQkFJZW1mZXUweHFhdEhCYWFkQ2xEODZrMWtXNTMwWXJEMkdBZHRTVldkNEx5RUs0TlNoZ0JvSjVuCnhSSk5FeGN2WllrdTV3UTNSZ2lEWmdOZUk3L0I3cWI5L3NWaXVFc0U0UHhPNUg1MTZ1a0V3cEFTenlJWUNtQXMKRlYxaVJKSXZmTndhaWhMcnA5aE10SWNFTTB0QkI1U3J5VGF6enVhTGEzNHRxRnRXSUNaSkp6dDhyVjdvRC9ZNQptbXNkcGQ4VnRBMkdvK0p1d1JyUUdFSEQvM0xvWXZSMmk5b3V4WitjaVloeEhGQlhDdU55bDZWODBXdTVzeForClFROVRndWhUTFprVWhhOFd6OTJCREF3N1VkTVQ3S0w3TFpGaTRzdGV6cDV4Q0ZiQ2tFVkl2cy9GUlI5S0VLaFgKMGwxYklTMUl2TkhZUUZ1NkFEamhzRVJrbDJ5bmJLMD0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="

    crt: foo
    key: bar

    secret:
      # -- If set to true, a Secret will be created to store the TLS certificate and key.
      create: true
      # -- If set, the Secret will be created with this name. Otherwise, a default name will be generated. 
      nameOverride: ""
    # -- The following TLS certificate information is for a self signed certificate. It is used as a default value for the validating admission webhook and the webhook server.
    crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwRENDQXJnQ0NRREh6RjdrK25yVGJUQU5CZ2txaGtpRzl3MEJBUXNGQURBcE1TY3dKUVlEVlFRRERCNUQKYkc5MVpGcGxjbTlUWld4bVUybG5ibVZrUTJWeWRHbG1hV05oZEdVd0lCY05NalV3TVRBek1UUXhNelExV2hnUApNakV5TkRFeU1UQXhOREV6TkRWYU1Da3hKekFsQmdOVkJBTU1Ia05zYjNWa1dtVnliMU5sYkdaVGFXZHVaV1JEClpYSjBhV1pwWTJGMFpUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU90U25LeEgKNVJqL1pjU1pENG82aFRsWFZvZmNnN2FpN3hRMU8xSjMrMXMzb2txeTBPQitXalZUVzd4NjNQUHhMNXdueU40Swpkb1A0VXphRXlvMWJZWWRkeFhZQ085Q05mT1VBOHNyRitKMjV1MFM4Lyt1QjNuVXJKUWY2ZjZ3bTZEOGNiZ0kzCnMxekZVdU1WMXc4MGNWWHA5ZWI2bFVTd1RNS0JYKytBb2IvWnhXb09BdnpseHhhYUtLRkt3bU1Na0dOTVJlbmEKdjhVNWJ5VUF3Z2Y4MU1iZTVyYUdMOFdRajY5RUt3NTV1S08wSWdnRjduajRzemNuNmVYYTFLY1R1OUpheFFMNwpWak5yQUJYMmFjdlhzd3l1aDJsc1lUV3dzVnFlT0pLaThJTUFmdklVYVFQUENyanJobi91THY5RUQzbEtHcDBpCmtJeUloa3ArcmxiQythV3U0ZS93K0NaNG9YZ1VMdkl0UUdsREdnaG5rSXhVeTdoaUZsVVlpTWVtWDNBb0x3M2oKcmhWU280ZGhLamMrdVFSblNYeFgzVDZXcXczb1kzVG5qQzErOEZnSkZwK2dyLzMySEt0WFF4YkNUVlNtcDVDYwo4c1A4TFBnOE1xcFZVZWIvV3UvK09ZcU9EZHY3SmxEMXAvM3RWUk1weG0zYjZNc2RoOFFIbGpjUkN4eDZJUlMxCi9xdkdPcU05SlhJdUg3ejFyYWh0cUQ4QVVjWHdoaHUyMWRLdWYycFIvcGdFdVpnNWhLNHRWMVR3aG95ZmZrMUMKUEhHTTRYQkhlU014Uk9LWjM2WDN0TzJRL1FLV04wN0FpbjhTVEVwL1Z1WmExdG15Zi9KQzJjWkJRcDZHN3B1LwprSHd0ckVCeEVRMmd0bVlzWENDRXh6T0c2THhaZkF1UlZVTFRBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnSUJBRG9WT3JMcTlBcjkxR3VuaUZhc1N1MTQ0RUFQLzYzTEVuVlBGbVhCbElBeEJCNkd3ZGx5VXBkU3h6VEsKNmlUNGpzQzEvZ05QZUkwMFZ6Um4zNmZuL2FHTFpHbkRERzZ3TGFYWnJ6Nm95VDlqSy9SVENseVlwckRtMld1WAp2TVFPZko4eEY5eTdLRU1hSEhFMmtEakpKSlpTWnVibU9Ma2llRjVma1ZtWHdLZW5mUzJzS0o0Y3ROUWxabW1MCjVBelNzVHZiZ2lELzRMNmMrU0w0eFI4MysrMWI1aDlIUFcrUnhqYmRoZ1BlUEdkTVdrOEQ3c0hPbjBTdjA3MGsKMnpTOXNrL09JbVJZN1BRbC82bjdKQTFGelMzUzMxY0h3STkwaHcydUwvRjRidGlFNUwvenFWaDVjcnB4QnhPaQpsdXBwVFdKL0o2cXVvQk9Sc0MyVG5tbzIveWFRZTZkVW96R2xYSTdtT0wyalpOd2tXbC9kbERNL1JUMWJqbU5pCm1kbjZxRUZCOGxTSGZnODBobTB6NXRhOTNXWHE3YXF4N2o2a1BlYVg2OUJvV05FalpVb211cXFlQlEyMWNmd0UKN2hxSlBJTm43RkcxMi8zZzhiREx4WWNWZkpmNnFIUTdEc3djK0NLNGI3dzIxdUJWbHZuWDhLeTRxbzBIYi9PQQp1TjByMlJ6WHRpdW9WaUcrbU5WdHltUHRkZ3BhVmdsdThQUEFHRGI0R1Q3VjlwT01WdVdOQ1d3ZDl6NG1YalYxCmdrL3U4OVZ6aTRmM0ZucWlYUGxGM2JxN05jY2w1SUN2cVhsU2ZDOWxqZWpXNFc0RDVLVzdVY3poSmNvcTdOV28KaWZoUTZGVDE5c09SMXFGUTRTdDVkbkN2ZGtuOTdIRGJGd2hyazRCWXp1dnJ2TlhXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRHJVcHlzUitVWS8yWEUKbVErS09vVTVWMWFIM0lPMm91OFVOVHRTZC90Yk42SktzdERnZmxvMVUxdThldHp6OFMrY0o4amVDbmFEK0ZNMgpoTXFOVzJHSFhjVjJBanZRalh6bEFQTEt4ZmlkdWJ0RXZQL3JnZDUxS3lVSCtuK3NKdWcvSEc0Q043TmN4VkxqCkZkY1BOSEZWNmZYbStwVkVzRXpDZ1YvdmdLRy8yY1ZxRGdMODVjY1dtaWloU3NKakRKQmpURVhwMnIvRk9XOGwKQU1JSC9OVEczdWEyaGkvRmtJK3ZSQ3NPZWJpanRDSUlCZTU0K0xNM0orbmwydFNuRTd2U1dzVUMrMVl6YXdBVgo5bW5MMTdNTXJvZHBiR0Uxc0xGYW5qaVNvdkNEQUg3eUZHa0R6d3E0NjRaLzdpNy9SQTk1U2hxZElwQ01pSVpLCmZxNVd3dm1scnVIdjhQZ21lS0Y0RkM3eUxVQnBReG9JWjVDTVZNdTRZaFpWR0lqSHBsOXdLQzhONDY0VlVxT0gKWVNvM1Bya0VaMGw4VjkwK2xxc042R04wNTR3dGZ2QllDUmFmb0svOTloeXJWME1Xd2sxVXBxZVFuUExEL0N6NApQREtxVlZIbS8xcnYvam1LamczYit5WlE5YWY5N1ZVVEtjWnQyK2pMSFlmRUI1WTNFUXNjZWlFVXRmNnJ4anFqClBTVnlMaCs4OWEyb2JhZy9BRkhGOElZYnR0WFNybjlxVWY2WUJMbVlPWVN1TFZkVThJYU1uMzVOUWp4eGpPRncKUjNrak1VVGltZCtsOTdUdGtQMENsamRPd0lwL0VreEtmMWJtV3RiWnNuL3lRdG5HUVVLZWh1NmJ2NUI4TGF4QQpjUkVOb0xabUxGd2doTWN6aHVpOFdYd0xrVlZDMHdJREFRQUJBb0lDQUQ2VjdDRk54YnFPUW15MUlKTHMyWDNVCm9xampsd3c5N1VQOG5GaGtuSzgzN3F2YlB2NVYzSHdPUFhtMVc0cHRmUElWQ3JFekt5NFNIMStDbGJSZXQyT2YKSnVNcDJPcXdscVQ1U1psd2FaelpSdHNUUVNWTGx2U21rdVM2VkxaZWFxcE9UMXU3b0xKdHNJdkF4VCsvL055UwpxdG5SajEyRFhnYmxEYlRQQ3pYUkgxWURmL3Z1eUxKVU1iWWtBZXNCN216YVhrWEI3ZnJ3T1lVbjNITHZaVSsyCi9MbFNtdVg2ZXB4c2p0Nzh0SVNsWmQrb1pESThRcjNLbWNTT0hMeUszUXNuSlBxVUNlc0c3RERySmx3V2RBSk4KY0tvekx1OXVuTnl5OCt6YjlRZUNYRURaK013UWhwT0Q0SE9wejBvSXVlelNMcDNZRVlXdTBiaUNWSyt5ajE1awp4QkFWSk1Sbk9MTlpXclIvUlZhNDNMcFZsTnVBSkJvbjFVeStYUkcxKy9UVW53NDNRcG5KZEoxTmJ4QVFzMmtuCnhFb3N2WTZvUFhVQlVmaGRLdC8xRk1DcGRpcDhoemNsbjBKc1hDUlhsUUtnQ1JnNHUrRmZ0YkhHQTVHR3ZZVFgKUDhFVFB6UWJjUnptalkvd2x2NVo5L0Vza1Awc2UvSTVrTnBEcTV0M3M3SllQbnpyOTlJNmxUak9zUml5UFBZRgpKeHFFWXVnK2dLTG9BZ2lsUUxadlh2c0R6T2FPSURNRGZhMmVjTGVTNkNMOE5Kc3lsOFRIcUpGTXQ1R1IxQ2pWCnJ3NDRUSkU5ZlJiUUt1ZkgzeDZ0Y2hKc1Bld2ZjYjM1S1dZUlRnZmhvOE90bFRWaVp2TkRERU9PWVRZamNQMTEKYU1DSytwQkFVVnRmY1lRU3V2YlJBb0lCQVFEMTVuRkpVdnRNNkFKVG51MW5nV01UOC9LbmlFbUV3SmE3TklxSwpqNm96dFB0NHFyckdQbTJXUStRQ09kZ1d4dk9sQzhWR2N5Zk03aHE5Zlg5WThSTWU1NU1jZDNodVhCR1dMRUh5CjR6MUNnYldnejFtVGV0ZjZrRUxmN3RoZS9ZTkZlbzN1Yk9DRXA4RitudFVLSUwxNHJ2QXAzNFh0N0hjWG95ZngKTE0rOTBuYms4bHRMdC96TTRzcTlVTjFSeDFNd2xRL3kvKzhVS3BKUmk1ZVlmTlBwbGVqMEw3dFQ3RzdEeDNXMQo3T3F6NGlWSHA1UzFMV2diYk9wKzZocGpJb0REc0J4K1MvY0ZRY3gwSGhiaFZiVi9wejc4RXdRa0dqNVBzN0syClpCLzFXRlJ5WUhlMTdkR1pLYmsvY1NQNzVONXFNbU4vV3RYcm5SUWNUMWhFalJkMUFvSUJBUUQwL1BOMXlMQngKbHl2ZnlYcEZlRE8yUURYNE5WMVN4RGQ2YXJLdGpiaGlPSTd3SkkwUkJ5OEJWdCtXa2JSZ0ZwU0xwRXJPcmQxNwpLTVFSa0NHU3E3WnA4OVF5S3k3TFg4UWVoQXhIc2tzOTZ1YnlLdTRoczNaMGV3MTlGZ2duWmpuaW84ZEZvNXVpCk41a3ZKazQxK3JXcy9EZU43UXlSU3M2TlE5Qy9wQlBTdUREWlNrSzBuTWNWcXhvMk1JaDVjaXZDSkdFMEc2ZzcKTjN2Zmg3MWhWTXlZbUNsS0wrR2NTVzNvU2tMa2laeFRmL3NRSzY1ZXFYZjFnUGFmTjBJOTBoZHUyT21nZndBMQpraFVnaERPU1lOZGU0Q1lRRlFhV3c3SGZwamdxVVVRd3FTVjlORDE3VnZrS01SQTNrNUZWaFE0TnJxRkVIeld6CjhsVmNnUm5RVmZBbkFvSUJBUURNNGVXd0wyamRLazZOOTlSY3NteW4rbEZMRDM0YUV4RkVCOElMTXlxZ0RJS2UKaHJvNlpWZVBwUjk4VDAvaG9vRHRHb0tUY1cxUERYRFFRNWx3dE9TMmtrSjdySHQya0ZYQzV6dEhzZGlmNmswNApJS3ZFK3N5cm83bGt0YkFvYlZnTDh0SUJQMHhPbXl2WVlXU21IS05odzNpdG11VVBXVC9kUFA4UnJzR2txcENQCnIvTXJnckFxMGlnVVZ5VWdkMUMwSU83NkRBN2FvYUhxT2NIa3R0VW1RZGFvWm9EUnF5U2JFVHpkaVBvQlNVTEEKa2p1UVBiWUphOVZ5UzRJUzZYT2FHTW1VM1p5REQ5RFhTeDdMUDB1TGdnRXpySEI5MkRQazJwZmo2a2JLZUg5YwpFVTZORWdyYWIrNCtrdmxsYnN0MmRtZDZmR2ZTK2IwQTNZZHhEcEhsQW9JQkFIWjNWeGRPdTV2Q0dUSTNFRXhGCml1UUhldEdTcEpVZ1V4OThOdmpidmh5bzh0M0hIdnZyK0Z2eWNWNHpDUUVxQ2h6WWptQVJEVGZBQjhmaVpZbXkKUlJ4SkR3UlBnMnBPM2R4UHlFeG5PQ0V4MVFtbm5zMW5KZEcvcTA4Z2QwTHVHUEd5ZHVzQzZZQncyRDlIaTZ4bwpscStXcXhxVFZXOXd1Qjd4ZXlFZ3E0RkxGandNditMc3FReWVWNmQ2b3BQdmxKOWx6aWRQZEhObUtoMTJXeXFVCndmYk1KYk05SWlEY0ZTeXR0RmtrL2hZV25nWTh5UzMzVHczRmxmeDUwU3RweTNFTHJUV3lGQnpUamluU0k4b1YKMEMrTnZub3FZS3hJNTF1WjJqRUVhVEFLcXhrM1NMKzYxK1NJd3luTXp3dUdzcndGQlBDWEV2WDRLalQ0TE01awpzQ01DZ2dFQkFJZW1mZXUweHFhdEhCYWFkQ2xEODZrMWtXNTMwWXJEMkdBZHRTVldkNEx5RUs0TlNoZ0JvSjVuCnhSSk5FeGN2WllrdTV3UTNSZ2lEWmdOZUk3L0I3cWI5L3NWaXVFc0U0UHhPNUg1MTZ1a0V3cEFTenlJWUNtQXMKRlYxaVJKSXZmTndhaWhMcnA5aE10SWNFTTB0QkI1U3J5VGF6enVhTGEzNHRxRnRXSUNaSkp6dDhyVjdvRC9ZNQptbXNkcGQ4VnRBMkdvK0p1d1JyUUdFSEQvM0xvWXZSMmk5b3V4WitjaVloeEhGQlhDdU55bDZWODBXdTVzeForClFROVRndWhUTFprVWhhOFd6OTJCREF3N1VkTVQ3S0w3TFpGaTRzdGV6cDV4Q0ZiQ2tFVkl2cy9GUlI5S0VLaFgKMGwxYklTMUl2TkhZUUZ1NkFEamhzRVJrbDJ5bmJLMD0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="
    # -- This path determines the location within the container where the TLS certificate and key will be mounted.
    mountPath: /etc/certs
    # -- This is the caBundle used by the Validating Admission Webhook when sending requests to the webhook server. If left empty, the default self-signed certificate will be used. 
    # Set this value to an empty string if using cert-manager to manage the certificate instead. Otherwise, set this to the base64 encoded caBundle of the desired certificate.
    caBundle: ""
    # -- If enabled, the certificate will be managed by cert-manager, which must already be present in the cluster.
    # If disabled, a default self-signed certificate will be used.
    useCertManager: false
  server:
    name: webhook-server
    replicaCount: 3
    image:
      repository: ghcr.io/cloudzero/cloudzero-insights-controller/cloudzero-insights-controller
      tag: 0.1.0
      pullPolicy: Always
    tls:
      # -- If enabled, a Secret will be created to store the TLS certificate and key.
      enabled: true
      useManagedCertificate: true
      nameOverride: ""
    port: 8443
    read_timeout: 10s
    write_timeout: 10s
    idle_timeout: 120s
    healthCheck:
      enabled: true
      path: /healthz
      port: 8443
      initialDelaySeconds: 15
      periodSeconds: 20
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 5
  volumeMounts: []
  volumes: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []
  podAnnotations: {}
  podLabels: {}
  service:
    port: 443
  webhooks:
    annotations: {}
    namespaceSelector: {}
    configurations:
      pods:
        path: /validate/pod
        apiGroups: ['""']
      namespaces:
        path: /validate/namespace
        apiGroups: ['""']
      deployments:
        path: /validate/deployment
        apiGroups: ["apps"]
      statefulsets:
        path: /validate/statefulset
        apiGroups: ["apps"]
      nodes:
        path: /validate/node
        apiGroups: ['""']
      jobs:
        path: /validate/job
        apiGroups: ["batch"]
      cronjobs:
        path: /validate/cronjob
        apiGroups: ["batch"]
      daemonsets:
        path: /validate/daemonset
        apiGroups: ["apps"]

serviceAccount:
  create: true
  name: ""
  annotations: {}

rbac:
  create: true

commonMetaLabels: {}

configmapReload:
  reloadUrl: ""
  env: []
  prometheus:
    enabled: true
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.70.0
      digest: ""
      pullPolicy: IfNotPresent

    containerSecurityContext: {}
    resources: {}
